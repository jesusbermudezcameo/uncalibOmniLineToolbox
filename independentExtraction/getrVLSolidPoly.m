%     << Automatic Line-Image Extraction Toolbox for Uncalibrated Central
%        Systems with Revolution Symmetry (release v0.5 alpha) >> 
%     ====================================================================
%     Copyright (C) 2014  Jesus Bermudez-Cameo
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.
% 
%     Acknowledgement:
%     This code has been implemented by Jesus Bermudez-Cameo and supervised 
%     by G.Lopez-Nicolas and J.J. Guerrero
% 
%     One may refer to the following paper:
% 
%     “Line extraction in uncalibrated central images with revolution symmetry”,
%     J. Bermudez-Cameo, G. Lopez-Nicolas and J. J. Guerrero,  
%     24th British Machine Vision Conference, BMVC, pp 1-11; Bristol, UK, Sept.  2013, 
% 
%     This work has been supported by the University of Zaragoza , the 
%     Spanish project VINEA DPI2012-31781, DGA-FSE(T04 and FEDER funds.
%     Jesus Bermudez-Cameo was supported by the FPU program AP2010-3849.

function r_vlSolid = getrVLSolidPoly(l1,l2,l3,r1,r2,r3)

% terms_rvl = [ r_vl^16, r_vl^14, r_vl^12, r_vl^10, r_vl^8, r_vl^6, r_vl^4, r_vl^2, 1];
c = [ 
l1^4 + 32*l1^2*l2^2 + 32*l1^2*l3^2 - 16*l2^4 + 32*l2^2*l3^2 - 16*l3^4;
l1^4*r1^2 + 16*l1^4*r2^2 + 16*l1^4*r3^2 - 80*l1^2*l2^2*r1^2 - 80*l1^2*l2^2*r2^2 - 32*l1^2*l2^2*r3^2 - 80*l1^2*l3^2*r1^2 - 32*l1^2*l3^2*r2^2 - 80*l1^2*l3^2*r3^2 + 16*l2^4*r1^2 + 64*l2^4*r2^2 + 16*l2^4*r3^2 - 32*l2^2*l3^2*r1^2 - 80*l2^2*l3^2*r2^2 - 80*l2^2*l3^2*r3^2 + 16*l3^4*r1^2 + 16*l3^4*r2^2 + 64*l3^4*r3^2;
l1^4*r1^4 - 64*l1^4*r1^2*r2^2 - 64*l1^4*r1^2*r3^2 - 4*l1^4*r2^4 - 16*l1^4*r2^2*r3^2 - 4*l1^4*r3^4 + 64*l1^2*l2^2*r1^4 + 200*l1^2*l2^2*r1^2*r2^2 + 80*l1^2*l2^2*r1^2*r3^2 + 64*l1^2*l2^2*r2^4 + 80*l1^2*l2^2*r2^2*r3^2 + 8*l1^2*l2^2*r3^4 + 64*l1^2*l3^2*r1^4 + 80*l1^2*l3^2*r1^2*r2^2 + 200*l1^2*l3^2*r1^2*r3^2 + 8*l1^2*l3^2*r2^4 + 80*l1^2*l3^2*r2^2*r3^2 + 64*l1^2*l3^2*r3^4 - 4*l2^4*r1^4 - 64*l2^4*r1^2*r2^2 - 16*l2^4*r1^2*r3^2 - 96*l2^4*r2^4 - 64*l2^4*r2^2*r3^2 - 4*l2^4*r3^4 + 8*l2^2*l3^2*r1^4 + 80*l2^2*l3^2*r1^2*r2^2 + 80*l2^2*l3^2*r1^2*r3^2 + 64*l2^2*l3^2*r2^4 + 200*l2^2*l3^2*r2^2*r3^2 + 64*l2^2*l3^2*r3^4 - 4*l3^4*r1^4 - 16*l3^4*r1^2*r2^2 - 64*l3^4*r1^2*r3^2 - 4*l3^4*r2^4 - 64*l3^4*r2^2*r3^2 - 96*l3^4*r3^4;
                                                                                                                                                                                                                                 64*l1^4*r1^6 + 96*l1^4*r1^4*r2^2 + 96*l1^4*r1^4*r3^2 + 16*l1^4*r1^2*r2^4 + 64*l1^4*r1^2*r2^2*r3^2 + 16*l1^4*r1^2*r3^4 + 4*l1^4*r2^4*r3^2 + 4*l1^4*r2^2*r3^4 - 16*l1^2*l2^2*r1^6 - 160*l1^2*l2^2*r1^4*r2^2 - 64*l1^2*l2^2*r1^4*r3^2 - 160*l1^2*l2^2*r1^2*r2^4 - 200*l1^2*l2^2*r1^2*r2^2*r3^2 - 20*l1^2*l2^2*r1^2*r3^4 - 16*l1^2*l2^2*r2^6 - 64*l1^2*l2^2*r2^4*r3^2 - 20*l1^2*l2^2*r2^2*r3^4 - 16*l1^2*l3^2*r1^6 - 64*l1^2*l3^2*r1^4*r2^2 - 160*l1^2*l3^2*r1^4*r3^2 - 20*l1^2*l3^2*r1^2*r2^4 - 200*l1^2*l3^2*r1^2*r2^2*r3^2 - 160*l1^2*l3^2*r1^2*r3^4 - 20*l1^2*l3^2*r2^4*r3^2 - 64*l1^2*l3^2*r2^2*r3^4 - 16*l1^2*l3^2*r3^6 + 16*l2^4*r1^4*r2^2 + 4*l2^4*r1^4*r3^2 + 96*l2^4*r1^2*r2^4 + 64*l2^4*r1^2*r2^2*r3^2 + 4*l2^4*r1^2*r3^4 + 64*l2^4*r2^6 + 96*l2^4*r2^4*r3^2 + 16*l2^4*r2^2*r3^4 - 20*l2^2*l3^2*r1^4*r2^2 - 20*l2^2*l3^2*r1^4*r3^2 - 64*l2^2*l3^2*r1^2*r2^4 - 200*l2^2*l3^2*r1^2*r2^2*r3^2 - 64*l2^2*l3^2*r1^2*r3^4 - 16*l2^2*l3^2*r2^6 - 160*l2^2*l3^2*r2^4*r3^2 - 160*l2^2*l3^2*r2^2*r3^4 - 16*l2^2*l3^2*r3^6 + 4*l3^4*r1^4*r2^2 + 16*l3^4*r1^4*r3^2 + 4*l3^4*r1^2*r2^4 + 64*l3^4*r1^2*r2^2*r3^2 + 96*l3^4*r1^2*r3^4 + 16*l3^4*r2^4*r3^2 + 96*l3^4*r2^2*r3^4 + 64*l3^4*r3^6;
 - 16*l1^4*r1^8 - 64*l1^4*r1^6*r2^2 - 64*l1^4*r1^6*r3^2 - 24*l1^4*r1^4*r2^4 - 96*l1^4*r1^4*r2^2*r3^2 - 24*l1^4*r1^4*r3^4 - 16*l1^4*r1^2*r2^4*r3^2 - 16*l1^4*r1^2*r2^2*r3^4 - l1^4*r2^4*r3^4 + 40*l1^2*l2^2*r1^6*r2^2 + 16*l1^2*l2^2*r1^6*r3^2 + 128*l1^2*l2^2*r1^4*r2^4 + 160*l1^2*l2^2*r1^4*r2^2*r3^2 + 16*l1^2*l2^2*r1^4*r3^4 + 40*l1^2*l2^2*r1^2*r2^6 + 160*l1^2*l2^2*r1^2*r2^4*r3^2 + 50*l1^2*l2^2*r1^2*r2^2*r3^4 + 16*l1^2*l2^2*r2^6*r3^2 + 16*l1^2*l2^2*r2^4*r3^4 + 16*l1^2*l3^2*r1^6*r2^2 + 40*l1^2*l3^2*r1^6*r3^2 + 16*l1^2*l3^2*r1^4*r2^4 + 160*l1^2*l3^2*r1^4*r2^2*r3^2 + 128*l1^2*l3^2*r1^4*r3^4 + 50*l1^2*l3^2*r1^2*r2^4*r3^2 + 160*l1^2*l3^2*r1^2*r2^2*r3^4 + 40*l1^2*l3^2*r1^2*r3^6 + 16*l1^2*l3^2*r2^4*r3^4 + 16*l1^2*l3^2*r2^2*r3^6 - 24*l2^4*r1^4*r2^4 - 16*l2^4*r1^4*r2^2*r3^2 - l2^4*r1^4*r3^4 - 64*l2^4*r1^2*r2^6 - 96*l2^4*r1^2*r2^4*r3^2 - 16*l2^4*r1^2*r2^2*r3^4 - 16*l2^4*r2^8 - 64*l2^4*r2^6*r3^2 - 24*l2^4*r2^4*r3^4 + 16*l2^2*l3^2*r1^4*r2^4 + 50*l2^2*l3^2*r1^4*r2^2*r3^2 + 16*l2^2*l3^2*r1^4*r3^4 + 16*l2^2*l3^2*r1^2*r2^6 + 160*l2^2*l3^2*r1^2*r2^4*r3^2 + 160*l2^2*l3^2*r1^2*r2^2*r3^4 + 16*l2^2*l3^2*r1^2*r3^6 + 40*l2^2*l3^2*r2^6*r3^2 + 128*l2^2*l3^2*r2^4*r3^4 + 40*l2^2*l3^2*r2^2*r3^6 - l3^4*r1^4*r2^4 - 16*l3^4*r1^4*r2^2*r3^2 - 24*l3^4*r1^4*r3^4 - 16*l3^4*r1^2*r2^4*r3^2 - 96*l3^4*r1^2*r2^2*r3^4 - 64*l3^4*r1^2*r3^6 - 24*l3^4*r2^4*r3^4 - 64*l3^4*r2^2*r3^6 - 16*l3^4*r3^8;
                                                                                    16*l1^4*r1^8*r2^2 + 16*l1^4*r1^8*r3^2 + 16*l1^4*r1^6*r2^4 + 64*l1^4*r1^6*r2^2*r3^2 + 16*l1^4*r1^6*r3^4 + 24*l1^4*r1^4*r2^4*r3^2 + 24*l1^4*r1^4*r2^2*r3^4 + 4*l1^4*r1^2*r2^4*r3^4 - 32*l1^2*l2^2*r1^6*r2^4 - 40*l1^2*l2^2*r1^6*r2^2*r3^2 - 4*l1^2*l2^2*r1^6*r3^4 - 32*l1^2*l2^2*r1^4*r2^6 - 128*l1^2*l2^2*r1^4*r2^4*r3^2 - 40*l1^2*l2^2*r1^4*r2^2*r3^4 - 40*l1^2*l2^2*r1^2*r2^6*r3^2 - 40*l1^2*l2^2*r1^2*r2^4*r3^4 - 4*l1^2*l2^2*r2^6*r3^4 - 4*l1^2*l3^2*r1^6*r2^4 - 40*l1^2*l3^2*r1^6*r2^2*r3^2 - 32*l1^2*l3^2*r1^6*r3^4 - 40*l1^2*l3^2*r1^4*r2^4*r3^2 - 128*l1^2*l3^2*r1^4*r2^2*r3^4 - 32*l1^2*l3^2*r1^4*r3^6 - 40*l1^2*l3^2*r1^2*r2^4*r3^4 - 40*l1^2*l3^2*r1^2*r2^2*r3^6 - 4*l1^2*l3^2*r2^4*r3^6 + 16*l2^4*r1^4*r2^6 + 24*l2^4*r1^4*r2^4*r3^2 + 4*l2^4*r1^4*r2^2*r3^4 + 16*l2^4*r1^2*r2^8 + 64*l2^4*r1^2*r2^6*r3^2 + 24*l2^4*r1^2*r2^4*r3^4 + 16*l2^4*r2^8*r3^2 + 16*l2^4*r2^6*r3^4 - 4*l2^2*l3^2*r1^4*r2^6 - 40*l2^2*l3^2*r1^4*r2^4*r3^2 - 40*l2^2*l3^2*r1^4*r2^2*r3^4 - 4*l2^2*l3^2*r1^4*r3^6 - 40*l2^2*l3^2*r1^2*r2^6*r3^2 - 128*l2^2*l3^2*r1^2*r2^4*r3^4 - 40*l2^2*l3^2*r1^2*r2^2*r3^6 - 32*l2^2*l3^2*r2^6*r3^4 - 32*l2^2*l3^2*r2^4*r3^6 + 4*l3^4*r1^4*r2^4*r3^2 + 24*l3^4*r1^4*r2^2*r3^4 + 16*l3^4*r1^4*r3^6 + 24*l3^4*r1^2*r2^4*r3^4 + 64*l3^4*r1^2*r2^2*r3^6 + 16*l3^4*r1^2*r3^8 + 16*l3^4*r2^4*r3^6 + 16*l3^4*r2^2*r3^8;
                                                                                                                                                                                                                                                                                                                                                                                                                                                 - 4*l1^4*r1^8*r2^4 - 16*l1^4*r1^8*r2^2*r3^2 - 4*l1^4*r1^8*r3^4 - 16*l1^4*r1^6*r2^4*r3^2 - 16*l1^4*r1^6*r2^2*r3^4 - 6*l1^4*r1^4*r2^4*r3^4 + 8*l1^2*l2^2*r1^6*r2^6 + 32*l1^2*l2^2*r1^6*r2^4*r3^2 + 10*l1^2*l2^2*r1^6*r2^2*r3^4 + 32*l1^2*l2^2*r1^4*r2^6*r3^2 + 32*l1^2*l2^2*r1^4*r2^4*r3^4 + 10*l1^2*l2^2*r1^2*r2^6*r3^4 + 10*l1^2*l3^2*r1^6*r2^4*r3^2 + 32*l1^2*l3^2*r1^6*r2^2*r3^4 + 8*l1^2*l3^2*r1^6*r3^6 + 32*l1^2*l3^2*r1^4*r2^4*r3^4 + 32*l1^2*l3^2*r1^4*r2^2*r3^6 + 10*l1^2*l3^2*r1^2*r2^4*r3^6 - 4*l2^4*r1^4*r2^8 - 16*l2^4*r1^4*r2^6*r3^2 - 6*l2^4*r1^4*r2^4*r3^4 - 16*l2^4*r1^2*r2^8*r3^2 - 16*l2^4*r1^2*r2^6*r3^4 - 4*l2^4*r2^8*r3^4 + 10*l2^2*l3^2*r1^4*r2^6*r3^2 + 32*l2^2*l3^2*r1^4*r2^4*r3^4 + 10*l2^2*l3^2*r1^4*r2^2*r3^6 + 32*l2^2*l3^2*r1^2*r2^6*r3^4 + 32*l2^2*l3^2*r1^2*r2^4*r3^6 + 8*l2^2*l3^2*r2^6*r3^6 - 6*l3^4*r1^4*r2^4*r3^4 - 16*l3^4*r1^4*r2^2*r3^6 - 4*l3^4*r1^4*r3^8 - 16*l3^4*r1^2*r2^4*r3^6 - 16*l3^4*r1^2*r2^2*r3^8 - 4*l3^4*r2^4*r3^8;
l1^4*r1^8*r2^4*r3^2 + 4*l1^4*r1^8*r2^2*r3^4 + 4*l1^4*r1^6*r2^4*r3^4 - 8*l1^2*l2^2*r1^6*r2^6*r3^2 - 8*l1^2*l2^2*r1^6*r2^4*r3^4 - 8*l1^2*l2^2*r1^4*r2^6*r3^4 - 8*l1^2*l3^2*r1^6*r2^4*r3^4 - 8*l1^2*l3^2*r1^6*r2^2*r3^6 - 8*l1^2*l3^2*r1^4*r2^4*r3^6 + 4*l2^4*r1^4*r2^8*r3^2 + 4*l2^4*r1^4*r2^6*r3^4 + 4*l2^4*r1^2*r2^8*r3^4 - 8*l2^2*l3^2*r1^4*r2^6*r3^4 - 8*l2^2*l3^2*r1^4*r2^4*r3^6 - 8*l2^2*l3^2*r1^2*r2^6*r3^6 + 4*l3^4*r1^4*r2^4*r3^6 + 4*l3^4*r1^4*r2^2*r3^8 + 4*l3^4*r1^2*r2^4*r3^8;
l1^4*r1^8*r2^4*r3^4 + 2*l1^2*l2^2*r1^6*r2^6*r3^4 + 2*l1^2*l3^2*r1^6*r2^4*r3^6 - l2^4*r1^4*r2^8*r3^4 + 2*l2^2*l3^2*r1^4*r2^6*r3^6 - l3^4*r1^4*r2^4*r3^8];

r_vl2 = roots(c);
r_vl = sqrt(r_vl2);

r = [r1;r2;r3];

solReal = zeros(1,8);
res = zeros(1,8);
resReal = zeros(1,8);


for k =1:numel(r_vl)
    res(k) = resSolidRVL(r_vl(k),l1,l2,l3,r);
    resReal(k) = isreal(res(k));
    solReal(k) = isreal(r_vl(k));
end

r_vlSolid = r_vl(resReal & solReal);

return;


% A = 16*(l1 + l2 - l3)*(l1 - l2 + l3)*(l2 - l1 + l3)*(l1 + l2 + l3)
% B = (64*l1^4 - 80*l1^2*l2^2 - 80*l1^2*l3^2 + 16*l2^4 - 32*l2^2*l3^2 + 16*l3^4)*r1^2 + (16*l1^4 - 80*l1^2*l2^2 - 32*l1^2*l3^2 + 64*l2^4 - 80*l2^2*l3^2 + 16*l3^4)*r2^2 + (16*l1^4 - 32*l1^2*l2^2 - 80*l1^2*l3^2 + 16*l2^4 - 80*l2^2*l3^2 + 64*l3^4)*r3^2
 

